/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./public/javascript/userProfile.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/croppr/dist/croppr.js":
/*!********************************************!*\
  !*** ./node_modules/croppr/dist/croppr.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/**\n * Croppr.js\n * https://github.com/jamesssooi/Croppr.js\n * \n * A JavaScript image cropper that's lightweight, awesome, and has\n * zero dependencies.\n * \n * (C) 2017 James Ooi. Released under the MIT License.\n */\n\n(function (global, factory) {\n\t true ? module.exports = factory() :\n\tundefined;\n}(this, (function () { 'use strict';\n\n(function () {\n  var lastTime = 0;\n  var vendors = ['ms', 'moz', 'webkit', 'o'];\n  for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n    window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];\n    window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];\n  }\n  if (!window.requestAnimationFrame) window.requestAnimationFrame = function (callback, element) {\n    var currTime = new Date().getTime();\n    var timeToCall = Math.max(0, 16 - (currTime - lastTime));\n    var id = window.setTimeout(function () {\n      callback(currTime + timeToCall);\n    }, timeToCall);\n    lastTime = currTime + timeToCall;\n    return id;\n  };\n  if (!window.cancelAnimationFrame) window.cancelAnimationFrame = function (id) {\n    clearTimeout(id);\n  };\n})();\n(function () {\n  if (typeof window.CustomEvent === \"function\") return false;\n  function CustomEvent(event, params) {\n    params = params || { bubbles: false, cancelable: false, detail: undefined };\n    var evt = document.createEvent('CustomEvent');\n    evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\n    return evt;\n  }\n  CustomEvent.prototype = window.Event.prototype;\n  window.CustomEvent = CustomEvent;\n})();\n(function (window) {\n  try {\n    new CustomEvent('test');\n    return false;\n  } catch (e) {}\n  function MouseEvent(eventType, params) {\n    params = params || { bubbles: false, cancelable: false };\n    var mouseEvent = document.createEvent('MouseEvent');\n    mouseEvent.initMouseEvent(eventType, params.bubbles, params.cancelable, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);\n    return mouseEvent;\n  }\n  MouseEvent.prototype = Event.prototype;\n  window.MouseEvent = MouseEvent;\n})(window);\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\n\n\n\n\n\n\nvar get = function get(object, property, receiver) {\n  if (object === null) object = Function.prototype;\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (parent === null) {\n      return undefined;\n    } else {\n      return get(parent, property, receiver);\n    }\n  } else if (\"value\" in desc) {\n    return desc.value;\n  } else {\n    var getter = desc.get;\n\n    if (getter === undefined) {\n      return undefined;\n    }\n\n    return getter.call(receiver);\n  }\n};\n\nvar inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\n\n\n\n\n\n\n\n\n\n\nvar possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\n\n\n\n\nvar slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar Handle =\n/**\n * Creates a new Handle instance.\n * @constructor\n * @param {Array} position The x and y ratio position of the handle\n *      within the crop region. Accepts a value between 0 to 1 in the order\n *      of [X, Y].\n * @param {Array} constraints Define the side of the crop region that\n *      is to be affected by this handle. Accepts a value of 0 or 1 in the\n *      order of [TOP, RIGHT, BOTTOM, LEFT].\n * @param {String} cursor The CSS cursor of this handle.\n * @param {Element} eventBus The element to dispatch events to.\n */\nfunction Handle(position, constraints, cursor, eventBus) {\n  classCallCheck(this, Handle);\n  var self = this;\n  this.position = position;\n  this.constraints = constraints;\n  this.cursor = cursor;\n  this.eventBus = eventBus;\n  this.el = document.createElement('div');\n  this.el.className = 'croppr-handle';\n  this.el.style.cursor = cursor;\n  this.el.addEventListener('mousedown', onMouseDown);\n  function onMouseDown(e) {\n    e.stopPropagation();\n    document.addEventListener('mouseup', onMouseUp);\n    document.addEventListener('mousemove', onMouseMove);\n    self.eventBus.dispatchEvent(new CustomEvent('handlestart', {\n      detail: { handle: self }\n    }));\n  }\n  function onMouseUp(e) {\n    e.stopPropagation();\n    document.removeEventListener('mouseup', onMouseUp);\n    document.removeEventListener('mousemove', onMouseMove);\n    self.eventBus.dispatchEvent(new CustomEvent('handleend', {\n      detail: { handle: self }\n    }));\n  }\n  function onMouseMove(e) {\n    e.stopPropagation();\n    self.eventBus.dispatchEvent(new CustomEvent('handlemove', {\n      detail: { mouseX: e.clientX, mouseY: e.clientY }\n    }));\n  }\n};\n\nvar Box = function () {\n  /**\n   * Creates a new Box instance.\n   * @constructor\n   * @param {Number} x1\n   * @param {Number} y1\n   * @param {Number} x2\n   * @param {Number} y2\n   */\n  function Box(x1, y1, x2, y2) {\n    classCallCheck(this, Box);\n    this.x1 = x1;\n    this.y1 = y1;\n    this.x2 = x2;\n    this.y2 = y2;\n  }\n  /**\n   * Sets the new dimensions of the box.\n   * @param {Number} x1\n   * @param {Number} y1\n   * @param {Number} x2\n   * @param {Number} y2\n   */\n  createClass(Box, [{\n    key: 'set',\n    value: function set$$1() {\n      var x1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var y1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var x2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var y2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      this.x1 = x1 == null ? this.x1 : x1;\n      this.y1 = y1 == null ? this.y1 : y1;\n      this.x2 = x2 == null ? this.x2 : x2;\n      this.y2 = y2 == null ? this.y2 : y2;\n      return this;\n    }\n    /**\n     * Calculates the width of the box.\n     * @returns {Number}\n     */\n  }, {\n    key: 'width',\n    value: function width() {\n      return Math.abs(this.x2 - this.x1);\n    }\n    /**\n     * Calculates the height of the box.\n     * @returns {Number}\n     */\n  }, {\n    key: 'height',\n    value: function height() {\n      return Math.abs(this.y2 - this.y1);\n    }\n    /**\n     * Resizes the box to a new size.\n     * @param {Number} newWidth\n     * @param {Number} newHeight\n     * @param {Array} [origin] The origin point to resize from.\n     *      Defaults to [0, 0] (top left).\n     */\n  }, {\n    key: 'resize',\n    value: function resize(newWidth, newHeight) {\n      var origin = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [0, 0];\n      var fromX = this.x1 + this.width() * origin[0];\n      var fromY = this.y1 + this.height() * origin[1];\n      this.x1 = fromX - newWidth * origin[0];\n      this.y1 = fromY - newHeight * origin[1];\n      this.x2 = this.x1 + newWidth;\n      this.y2 = this.y1 + newHeight;\n      return this;\n    }\n    /**\n     * Scale the box by a factor.\n     * @param {Number} factor\n     * @param {Array} [origin] The origin point to resize from.\n     *      Defaults to [0, 0] (top left).\n     */\n  }, {\n    key: 'scale',\n    value: function scale(factor) {\n      var origin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0];\n      var newWidth = this.width() * factor;\n      var newHeight = this.height() * factor;\n      this.resize(newWidth, newHeight, origin);\n      return this;\n    }\n  }, {\n    key: 'move',\n    value: function move() {\n      var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var width = this.width();\n      var height = this.height();\n      x = x === null ? this.x1 : x;\n      y = y === null ? this.y1 : y;\n      this.x1 = x;\n      this.y1 = y;\n      this.x2 = x + width;\n      this.y2 = y + height;\n      return this;\n    }\n    /**\n     * Get relative x and y coordinates of a given point within the box.\n     * @param {Array} point The x and y ratio position within the box.\n     * @returns {Array} The x and y coordinates [x, y].\n     */\n  }, {\n    key: 'getRelativePoint',\n    value: function getRelativePoint() {\n      var point = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [0, 0];\n      var x = this.width() * point[0];\n      var y = this.height() * point[1];\n      return [x, y];\n    }\n    /**\n     * Get absolute x and y coordinates of a given point within the box.\n     * @param {Array} point The x and y ratio position within the box.\n     * @returns {Array} The x and y coordinates [x, y].\n     */\n  }, {\n    key: 'getAbsolutePoint',\n    value: function getAbsolutePoint() {\n      var point = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [0, 0];\n      var x = this.x1 + this.width() * point[0];\n      var y = this.y1 + this.height() * point[1];\n      return [x, y];\n    }\n    /**\n     * Constrain the box to a fixed ratio.\n     * @param {Number} ratio\n     * @param {Array} [origin] The origin point to resize from.\n     *     Defaults to [0, 0] (top left).\n     * @param {String} [grow] The axis to grow to maintain the ratio.\n     *     Defaults to 'height'.\n     */\n  }, {\n    key: 'constrainToRatio',\n    value: function constrainToRatio(ratio) {\n      var origin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0];\n      var grow = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'height';\n      if (ratio === null) {\n        return;\n      }\n      var width = this.width();\n      var height = this.height();\n      switch (grow) {\n        case 'height':\n          this.resize(this.width(), this.width() * ratio, origin);\n          break;\n        case 'width':\n          this.resize(this.height() * 1 / ratio, this.height(), origin);\n          break;\n        default:\n          this.resize(this.width(), this.width() * ratio, origin);\n      }\n      return this;\n    }\n    /**\n     * Constrain the box within a boundary.\n     * @param {Number} boundaryWidth\n     * @param {Number} boundaryHeight\n     * @param {Array} [origin] The origin point to resize from.\n     *     Defaults to [0, 0] (top left).\n     */\n  }, {\n    key: 'constrainToBoundary',\n    value: function constrainToBoundary(boundaryWidth, boundaryHeight) {\n      var origin = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [0, 0];\n      var _getAbsolutePoint = this.getAbsolutePoint(origin),\n          _getAbsolutePoint2 = slicedToArray(_getAbsolutePoint, 2),\n          originX = _getAbsolutePoint2[0],\n          originY = _getAbsolutePoint2[1];\n      var maxIfLeft = originX;\n      var maxIfTop = originY;\n      var maxIfRight = boundaryWidth - originX;\n      var maxIfBottom = boundaryHeight - originY;\n      var directionX = -2 * origin[0] + 1;\n      var directionY = -2 * origin[1] + 1;\n      var maxWidth = null,\n          maxHeight = null;\n      switch (directionX) {\n        case -1:\n          maxWidth = maxIfLeft;break;\n        case 0:\n          maxWidth = Math.min(maxIfLeft, maxIfRight) * 2;break;\n        case +1:\n          maxWidth = maxIfRight;break;\n      }\n      switch (directionY) {\n        case -1:\n          maxHeight = maxIfTop;break;\n        case 0:\n          maxHeight = Math.min(maxIfTop, maxIfBottom) * 2;break;\n        case +1:\n          maxHeight = maxIfBottom;break;\n      }\n      if (this.width() > maxWidth) {\n        var factor = maxWidth / this.width();\n        this.scale(factor, origin);\n      }\n      if (this.height() > maxHeight) {\n        var _factor = maxHeight / this.height();\n        this.scale(_factor, origin);\n      }\n      return this;\n    }\n    /**\n     * Constrain the box to a maximum/minimum size.\n     * @param {Number} [maxWidth]\n     * @param {Number} [maxHeight]\n     * @param {Number} [minWidth]\n     * @param {Number} [minHeight]\n     * @param {Array} [origin] The origin point to resize from.\n     *     Defaults to [0, 0] (top left).\n     * @param {Number} [ratio] Ratio to maintain.\n     */\n  }, {\n    key: 'constrainToSize',\n    value: function constrainToSize() {\n      var maxWidth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var maxHeight = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var minWidth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var minHeight = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      var origin = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [0, 0];\n      var ratio = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;\n      if (ratio) {\n        if (ratio > 1) {\n          maxWidth = maxHeight * 1 / ratio;\n          minHeight = minHeight * ratio;\n        } else if (ratio < 1) {\n          maxHeight = maxWidth * ratio;\n          minWidth = minHeight * 1 / ratio;\n        }\n      }\n      if (maxWidth && this.width() > maxWidth) {\n        var newWidth = maxWidth,\n            newHeight = ratio === null ? this.height() : maxHeight;\n        this.resize(newWidth, newHeight, origin);\n      }\n      if (maxHeight && this.height() > maxHeight) {\n        var _newWidth = ratio === null ? this.width() : maxWidth,\n            _newHeight = maxHeight;\n        this.resize(_newWidth, _newHeight, origin);\n      }\n      if (minWidth && this.width() < minWidth) {\n        var _newWidth2 = minWidth,\n            _newHeight2 = ratio === null ? this.height() : minHeight;\n        this.resize(_newWidth2, _newHeight2, origin);\n      }\n      if (minHeight && this.height() < minHeight) {\n        var _newWidth3 = ratio === null ? this.width() : minWidth,\n            _newHeight3 = minHeight;\n        this.resize(_newWidth3, _newHeight3, origin);\n      }\n      return this;\n    }\n  }]);\n  return Box;\n}();\n\n/**\n * Binds an element's touch events to be simulated as mouse events.\n * @param {Element} element\n */\nfunction enableTouch(element) {\n  element.addEventListener('touchstart', simulateMouseEvent);\n  element.addEventListener('touchend', simulateMouseEvent);\n  element.addEventListener('touchmove', simulateMouseEvent);\n}\n/**\n * Translates a touch event to a mouse event.\n * @param {Event} e\n */\nfunction simulateMouseEvent(e) {\n  e.preventDefault();\n  var touch = e.changedTouches[0];\n  var eventMap = {\n    'touchstart': 'mousedown',\n    'touchmove': 'mousemove',\n    'touchend': 'mouseup'\n  };\n  touch.target.dispatchEvent(new MouseEvent(eventMap[e.type], {\n    bubbles: true,\n    cancelable: true,\n    view: window,\n    clientX: touch.clientX,\n    clientY: touch.clientY,\n    screenX: touch.screenX,\n    screenY: touch.screenY\n  }));\n}\n\n/**\n * Define a list of handles to create.\n *\n * @property {Array} position - The x and y ratio position of the handle within\n *      the crop region. Accepts a value between 0 to 1 in the order of [X, Y].\n * @property {Array} constraints - Define the side of the crop region that is to\n *      be affected by this handle. Accepts a value of 0 or 1 in the order of\n *      [TOP, RIGHT, BOTTOM, LEFT].\n * @property {String} cursor - The CSS cursor of this handle.\n */\nvar HANDLES = [{ position: [0.0, 0.0], constraints: [1, 0, 0, 1], cursor: 'nw-resize' }, { position: [0.5, 0.0], constraints: [1, 0, 0, 0], cursor: 'n-resize' }, { position: [1.0, 0.0], constraints: [1, 1, 0, 0], cursor: 'ne-resize' }, { position: [1.0, 0.5], constraints: [0, 1, 0, 0], cursor: 'e-resize' }, { position: [1.0, 1.0], constraints: [0, 1, 1, 0], cursor: 'se-resize' }, { position: [0.5, 1.0], constraints: [0, 0, 1, 0], cursor: 's-resize' }, { position: [0.0, 1.0], constraints: [0, 0, 1, 1], cursor: 'sw-resize' }, { position: [0.0, 0.5], constraints: [0, 0, 0, 1], cursor: 'w-resize' }];\nvar CropprCore = function () {\n  function CropprCore(element, options) {\n    var _this = this;\n    var deferred = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    classCallCheck(this, CropprCore);\n    this.options = CropprCore.parseOptions(options || {});\n    if (!element.nodeName) {\n      element = document.querySelector(element);\n      if (element == null) {\n        throw 'Unable to find element.';\n      }\n    }\n    if (!element.getAttribute('src')) {\n      throw 'Image src not provided.';\n    }\n    this._initialized = false;\n    this._restore = {\n      parent: element.parentNode,\n      element: element\n    };\n    if (!deferred) {\n      if (element.width === 0 || element.height === 0) {\n        element.onload = function () {\n          _this.initialize(element);\n        };\n      } else {\n        this.initialize(element);\n      }\n    }\n  }\n  createClass(CropprCore, [{\n    key: 'initialize',\n    value: function initialize(element) {\n      this.createDOM(element);\n      this.options.convertToPixels(this.cropperEl);\n      this.attachHandlerEvents();\n      this.attachRegionEvents();\n      this.attachOverlayEvents();\n      this.box = this.initializeBox(this.options);\n      this.redraw();\n      this._initialized = true;\n      if (this.options.onInitialize !== null) {\n        this.options.onInitialize(this);\n      }\n    }\n  }, {\n    key: 'createDOM',\n    value: function createDOM(targetEl) {\n      this.containerEl = document.createElement('div');\n      this.containerEl.className = 'croppr-container';\n      this.eventBus = this.containerEl;\n      enableTouch(this.containerEl);\n      this.cropperEl = document.createElement('div');\n      this.cropperEl.className = 'croppr';\n      this.imageEl = document.createElement('img');\n      this.imageEl.setAttribute('src', targetEl.getAttribute('src'));\n      this.imageEl.setAttribute('alt', targetEl.getAttribute('alt'));\n      this.imageEl.className = 'croppr-image';\n      this.imageClippedEl = this.imageEl.cloneNode();\n      this.imageClippedEl.className = 'croppr-imageClipped';\n      this.regionEl = document.createElement('div');\n      this.regionEl.className = 'croppr-region';\n      this.overlayEl = document.createElement('div');\n      this.overlayEl.className = 'croppr-overlay';\n      var handleContainerEl = document.createElement('div');\n      handleContainerEl.className = 'croppr-handleContainer';\n      this.handles = [];\n      for (var i = 0; i < HANDLES.length; i++) {\n        var handle = new Handle(HANDLES[i].position, HANDLES[i].constraints, HANDLES[i].cursor, this.eventBus);\n        this.handles.push(handle);\n        handleContainerEl.appendChild(handle.el);\n      }\n      this.cropperEl.appendChild(this.imageEl);\n      this.cropperEl.appendChild(this.imageClippedEl);\n      this.cropperEl.appendChild(this.regionEl);\n      this.cropperEl.appendChild(this.overlayEl);\n      this.cropperEl.appendChild(handleContainerEl);\n      this.containerEl.appendChild(this.cropperEl);\n      targetEl.parentElement.replaceChild(this.containerEl, targetEl);\n    }\n    /**\n     * Changes the image src.\n     * @param {String} src\n     */\n  }, {\n    key: 'setImage',\n    value: function setImage(src) {\n      var _this2 = this;\n      this.imageEl.onload = function () {\n        _this2.box = _this2.initializeBox(_this2.options);\n        _this2.redraw();\n      };\n      this.imageEl.src = src;\n      this.imageClippedEl.src = src;\n      return this;\n    }\n  }, {\n    key: 'destroy',\n    value: function destroy() {\n      this._restore.parent.replaceChild(this._restore.element, this.containerEl);\n    }\n    /**\n     * Create a new box region with a set of options.\n     * @param {Object} opts The options.\n     * @returns {Box}\n     */\n  }, {\n    key: 'initializeBox',\n    value: function initializeBox(opts) {\n      var width = opts.startSize.width;\n      var height = opts.startSize.height;\n      var box = new Box(0, 0, width, height);\n      box.constrainToRatio(opts.aspectRatio, [0.5, 0.5]);\n      var min = opts.minSize;\n      var max = opts.maxSize;\n      box.constrainToSize(max.width, max.height, min.width, min.height, [0.5, 0.5], opts.aspectRatio);\n      var parentWidth = this.cropperEl.offsetWidth;\n      var parentHeight = this.cropperEl.offsetHeight;\n      box.constrainToBoundary(parentWidth, parentHeight, [0.5, 0.5]);\n      var x = this.cropperEl.offsetWidth / 2 - box.width() / 2;\n      var y = this.cropperEl.offsetHeight / 2 - box.height() / 2;\n      box.move(x, y);\n      return box;\n    }\n  }, {\n    key: 'redraw',\n    value: function redraw() {\n      var _this3 = this;\n      var width = Math.round(this.box.width()),\n          height = Math.round(this.box.height()),\n          x1 = Math.round(this.box.x1),\n          y1 = Math.round(this.box.y1),\n          x2 = Math.round(this.box.x2),\n          y2 = Math.round(this.box.y2);\n      window.requestAnimationFrame(function () {\n        _this3.regionEl.style.transform = 'translate(' + x1 + 'px, ' + y1 + 'px)';\n        _this3.regionEl.style.width = width + 'px';\n        _this3.regionEl.style.height = height + 'px';\n        _this3.imageClippedEl.style.clip = 'rect(' + y1 + 'px, ' + x2 + 'px, ' + y2 + 'px, ' + x1 + 'px)';\n        var center = _this3.box.getAbsolutePoint([.5, .5]);\n        var xSign = center[0] - _this3.cropperEl.offsetWidth / 2 >> 31;\n        var ySign = center[1] - _this3.cropperEl.offsetHeight / 2 >> 31;\n        var quadrant = (xSign ^ ySign) + ySign + ySign + 4;\n        var foregroundHandleIndex = -2 * quadrant + 8;\n        for (var i = 0; i < _this3.handles.length; i++) {\n          var handle = _this3.handles[i];\n          var handleWidth = handle.el.offsetWidth;\n          var handleHeight = handle.el.offsetHeight;\n          var left = x1 + width * handle.position[0] - handleWidth / 2;\n          var top = y1 + height * handle.position[1] - handleHeight / 2;\n          handle.el.style.transform = 'translate(' + Math.round(left) + 'px, ' + Math.round(top) + 'px)';\n          handle.el.style.zIndex = foregroundHandleIndex == i ? 5 : 4;\n        }\n      });\n    }\n  }, {\n    key: 'attachHandlerEvents',\n    value: function attachHandlerEvents() {\n      var eventBus = this.eventBus;\n      eventBus.addEventListener('handlestart', this.onHandleMoveStart.bind(this));\n      eventBus.addEventListener('handlemove', this.onHandleMoveMoving.bind(this));\n      eventBus.addEventListener('handleend', this.onHandleMoveEnd.bind(this));\n    }\n  }, {\n    key: 'attachRegionEvents',\n    value: function attachRegionEvents() {\n      var eventBus = this.eventBus;\n      var self = this;\n      this.regionEl.addEventListener('mousedown', onMouseDown);\n      eventBus.addEventListener('regionstart', this.onRegionMoveStart.bind(this));\n      eventBus.addEventListener('regionmove', this.onRegionMoveMoving.bind(this));\n      eventBus.addEventListener('regionend', this.onRegionMoveEnd.bind(this));\n      function onMouseDown(e) {\n        e.stopPropagation();\n        document.addEventListener('mouseup', onMouseUp);\n        document.addEventListener('mousemove', onMouseMove);\n        eventBus.dispatchEvent(new CustomEvent('regionstart', {\n          detail: { mouseX: e.clientX, mouseY: e.clientY }\n        }));\n      }\n      function onMouseMove(e) {\n        e.stopPropagation();\n        eventBus.dispatchEvent(new CustomEvent('regionmove', {\n          detail: { mouseX: e.clientX, mouseY: e.clientY }\n        }));\n      }\n      function onMouseUp(e) {\n        e.stopPropagation();\n        document.removeEventListener('mouseup', onMouseUp);\n        document.removeEventListener('mousemove', onMouseMove);\n        eventBus.dispatchEvent(new CustomEvent('regionend', {\n          detail: { mouseX: e.clientX, mouseY: e.clientY }\n        }));\n      }\n    }\n  }, {\n    key: 'attachOverlayEvents',\n    value: function attachOverlayEvents() {\n      var SOUTHEAST_HANDLE_IDX = 4;\n      var self = this;\n      var tmpBox = null;\n      this.overlayEl.addEventListener('mousedown', onMouseDown);\n      function onMouseDown(e) {\n        e.stopPropagation();\n        document.addEventListener('mouseup', onMouseUp);\n        document.addEventListener('mousemove', onMouseMove);\n        var container = self.cropperEl.getBoundingClientRect();\n        var mouseX = e.clientX - container.left;\n        var mouseY = e.clientY - container.top;\n        tmpBox = self.box;\n        self.box = new Box(mouseX, mouseY, mouseX + 1, mouseY + 1);\n        self.eventBus.dispatchEvent(new CustomEvent('handlestart', {\n          detail: { handle: self.handles[SOUTHEAST_HANDLE_IDX] }\n        }));\n      }\n      function onMouseMove(e) {\n        e.stopPropagation();\n        self.eventBus.dispatchEvent(new CustomEvent('handlemove', {\n          detail: { mouseX: e.clientX, mouseY: e.clientY }\n        }));\n      }\n      function onMouseUp(e) {\n        e.stopPropagation();\n        document.removeEventListener('mouseup', onMouseUp);\n        document.removeEventListener('mousemove', onMouseMove);\n        if (self.box.width() === 1 && self.box.height() === 1) {\n          self.box = tmpBox;\n          return;\n        }\n        self.eventBus.dispatchEvent(new CustomEvent('handleend', {\n          detail: { mouseX: e.clientX, mouseY: e.clientY }\n        }));\n      }\n    }\n  }, {\n    key: 'onHandleMoveStart',\n    value: function onHandleMoveStart(e) {\n      var handle = e.detail.handle;\n      var originPoint = [1 - handle.position[0], 1 - handle.position[1]];\n      var _box$getAbsolutePoint = this.box.getAbsolutePoint(originPoint),\n          _box$getAbsolutePoint2 = slicedToArray(_box$getAbsolutePoint, 2),\n          originX = _box$getAbsolutePoint2[0],\n          originY = _box$getAbsolutePoint2[1];\n      this.activeHandle = { handle: handle, originPoint: originPoint, originX: originX, originY: originY };\n      if (this.options.onCropStart !== null) {\n        this.options.onCropStart(this.getValue());\n      }\n    }\n  }, {\n    key: 'onHandleMoveMoving',\n    value: function onHandleMoveMoving(e) {\n      var _e$detail = e.detail,\n          mouseX = _e$detail.mouseX,\n          mouseY = _e$detail.mouseY;\n      var container = this.cropperEl.getBoundingClientRect();\n      mouseX = mouseX - container.left;\n      mouseY = mouseY - container.top;\n      if (mouseX < 0) {\n        mouseX = 0;\n      } else if (mouseX > container.width) {\n        mouseX = container.width;\n      }\n      if (mouseY < 0) {\n        mouseY = 0;\n      } else if (mouseY > container.height) {\n        mouseY = container.height;\n      }\n      var origin = this.activeHandle.originPoint.slice();\n      var originX = this.activeHandle.originX;\n      var originY = this.activeHandle.originY;\n      var handle = this.activeHandle.handle;\n      var TOP_MOVABLE = handle.constraints[0] === 1;\n      var RIGHT_MOVABLE = handle.constraints[1] === 1;\n      var BOTTOM_MOVABLE = handle.constraints[2] === 1;\n      var LEFT_MOVABLE = handle.constraints[3] === 1;\n      var MULTI_AXIS = (LEFT_MOVABLE || RIGHT_MOVABLE) && (TOP_MOVABLE || BOTTOM_MOVABLE);\n      var x1 = LEFT_MOVABLE || RIGHT_MOVABLE ? originX : this.box.x1;\n      var x2 = LEFT_MOVABLE || RIGHT_MOVABLE ? originX : this.box.x2;\n      var y1 = TOP_MOVABLE || BOTTOM_MOVABLE ? originY : this.box.y1;\n      var y2 = TOP_MOVABLE || BOTTOM_MOVABLE ? originY : this.box.y2;\n      x1 = LEFT_MOVABLE ? mouseX : x1;\n      x2 = RIGHT_MOVABLE ? mouseX : x2;\n      y1 = TOP_MOVABLE ? mouseY : y1;\n      y2 = BOTTOM_MOVABLE ? mouseY : y2;\n      var isFlippedX = false,\n          isFlippedY = false;\n      if (LEFT_MOVABLE || RIGHT_MOVABLE) {\n        isFlippedX = LEFT_MOVABLE ? mouseX > originX : mouseX < originX;\n      }\n      if (TOP_MOVABLE || BOTTOM_MOVABLE) {\n        isFlippedY = TOP_MOVABLE ? mouseY > originY : mouseY < originY;\n      }\n      if (isFlippedX) {\n        var tmp = x1;x1 = x2;x2 = tmp;\n        origin[0] = 1 - origin[0];\n      }\n      if (isFlippedY) {\n        var _tmp = y1;y1 = y2;y2 = _tmp;\n        origin[1] = 1 - origin[1];\n      }\n      var box = new Box(x1, y1, x2, y2);\n      if (this.options.aspectRatio) {\n        var ratio = this.options.aspectRatio;\n        var isVerticalMovement = false;\n        if (MULTI_AXIS) {\n          isVerticalMovement = mouseY > box.y1 + ratio * box.width() || mouseY < box.y2 - ratio * box.width();\n        } else if (TOP_MOVABLE || BOTTOM_MOVABLE) {\n          isVerticalMovement = true;\n        }\n        var ratioMode = isVerticalMovement ? 'width' : 'height';\n        box.constrainToRatio(ratio, origin, ratioMode);\n      }\n      var min = this.options.minSize;\n      var max = this.options.maxSize;\n      box.constrainToSize(max.width, max.height, min.width, min.height, origin, this.options.aspectRatio);\n      var parentWidth = this.cropperEl.offsetWidth;\n      var parentHeight = this.cropperEl.offsetHeight;\n      box.constrainToBoundary(parentWidth, parentHeight, origin);\n      this.box = box;\n      this.redraw();\n      if (this.options.onCropMove !== null) {\n        this.options.onCropMove(this.getValue());\n      }\n    }\n  }, {\n    key: 'onHandleMoveEnd',\n    value: function onHandleMoveEnd(e) {\n      if (this.options.onCropEnd !== null) {\n        this.options.onCropEnd(this.getValue());\n      }\n    }\n  }, {\n    key: 'onRegionMoveStart',\n    value: function onRegionMoveStart(e) {\n      var _e$detail2 = e.detail,\n          mouseX = _e$detail2.mouseX,\n          mouseY = _e$detail2.mouseY;\n      var container = this.cropperEl.getBoundingClientRect();\n      mouseX = mouseX - container.left;\n      mouseY = mouseY - container.top;\n      this.currentMove = {\n        offsetX: mouseX - this.box.x1,\n        offsetY: mouseY - this.box.y1\n      };\n      if (this.options.onCropStart !== null) {\n        this.options.onCropStart(this.getValue());\n      }\n    }\n  }, {\n    key: 'onRegionMoveMoving',\n    value: function onRegionMoveMoving(e) {\n      var _e$detail3 = e.detail,\n          mouseX = _e$detail3.mouseX,\n          mouseY = _e$detail3.mouseY;\n      var _currentMove = this.currentMove,\n          offsetX = _currentMove.offsetX,\n          offsetY = _currentMove.offsetY;\n      var container = this.cropperEl.getBoundingClientRect();\n      mouseX = mouseX - container.left;\n      mouseY = mouseY - container.top;\n      this.box.move(mouseX - offsetX, mouseY - offsetY);\n      if (this.box.x1 < 0) {\n        this.box.move(0, null);\n      }\n      if (this.box.x2 > container.width) {\n        this.box.move(container.width - this.box.width(), null);\n      }\n      if (this.box.y1 < 0) {\n        this.box.move(null, 0);\n      }\n      if (this.box.y2 > container.height) {\n        this.box.move(null, container.height - this.box.height());\n      }\n      this.redraw();\n      if (this.options.onCropMove !== null) {\n        this.options.onCropMove(this.getValue());\n      }\n    }\n  }, {\n    key: 'onRegionMoveEnd',\n    value: function onRegionMoveEnd(e) {\n      if (this.options.onCropEnd !== null) {\n        this.options.onCropEnd(this.getValue());\n      }\n    }\n  }, {\n    key: 'getValue',\n    value: function getValue() {\n      var mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      if (mode === null) {\n        mode = this.options.returnMode;\n      }\n      if (mode == 'real') {\n        var actualWidth = this.imageEl.naturalWidth;\n        var actualHeight = this.imageEl.naturalHeight;\n        var _imageEl$getBoundingC = this.imageEl.getBoundingClientRect(),\n            elementWidth = _imageEl$getBoundingC.width,\n            elementHeight = _imageEl$getBoundingC.height;\n        var factorX = actualWidth / elementWidth;\n        var factorY = actualHeight / elementHeight;\n        return {\n          x: Math.round(this.box.x1 * factorX),\n          y: Math.round(this.box.y1 * factorY),\n          width: Math.round(this.box.width() * factorX),\n          height: Math.round(this.box.height() * factorY)\n        };\n      } else if (mode == 'ratio') {\n        var _imageEl$getBoundingC2 = this.imageEl.getBoundingClientRect(),\n            _elementWidth = _imageEl$getBoundingC2.width,\n            _elementHeight = _imageEl$getBoundingC2.height;\n        return {\n          x: round(this.box.x1 / _elementWidth, 3),\n          y: round(this.box.y1 / _elementHeight, 3),\n          width: round(this.box.width() / _elementWidth, 3),\n          height: round(this.box.height() / _elementHeight, 3)\n        };\n      } else if (mode == 'raw') {\n        return {\n          x: Math.round(this.box.x1),\n          y: Math.round(this.box.y1),\n          width: Math.round(this.box.width()),\n          height: Math.round(this.box.height())\n        };\n      }\n    }\n  }], [{\n    key: 'parseOptions',\n    value: function parseOptions(opts) {\n      var defaults$$1 = {\n        aspectRatio: null,\n        maxSize: { width: null, height: null },\n        minSize: { width: null, height: null },\n        startSize: { width: 100, height: 100, unit: '%' },\n        returnMode: 'real',\n        onInitialize: null,\n        onCropStart: null,\n        onCropMove: null,\n        onCropEnd: null\n      };\n      var aspectRatio = null;\n      if (opts.aspectRatio !== undefined) {\n        if (typeof opts.aspectRatio === 'number') {\n          aspectRatio = opts.aspectRatio;\n        } else if (opts.aspectRatio instanceof Array) {\n          aspectRatio = opts.aspectRatio[1] / opts.aspectRatio[0];\n        }\n      }\n      var maxSize = null;\n      if (opts.maxSize !== undefined && opts.maxSize !== null) {\n        maxSize = {\n          width: opts.maxSize[0] || null,\n          height: opts.maxSize[1] || null,\n          unit: opts.maxSize[2] || 'px'\n        };\n      }\n      var minSize = null;\n      if (opts.minSize !== undefined && opts.minSize !== null) {\n        minSize = {\n          width: opts.minSize[0] || null,\n          height: opts.minSize[1] || null,\n          unit: opts.minSize[2] || 'px'\n        };\n      }\n      var startSize = null;\n      if (opts.startSize !== undefined && opts.startSize !== null) {\n        startSize = {\n          width: opts.startSize[0] || null,\n          height: opts.startSize[1] || null,\n          unit: opts.startSize[2] || '%'\n        };\n      }\n      var onInitialize = null;\n      if (typeof opts.onInitialize === 'function') {\n        onInitialize = opts.onInitialize;\n      }\n      var onCropStart = null;\n      if (typeof opts.onCropStart === 'function') {\n        onCropStart = opts.onCropStart;\n      }\n      var onCropEnd = null;\n      if (typeof opts.onCropEnd === 'function') {\n        onCropEnd = opts.onCropEnd;\n      }\n      var onCropMove = null;\n      if (typeof opts.onUpdate === 'function') {\n        console.warn('Croppr.js: `onUpdate` is deprecated and will be removed in the next major release. Please use `onCropMove` or `onCropEnd` instead.');\n        onCropMove = opts.onUpdate;\n      }\n      if (typeof opts.onCropMove === 'function') {\n        onCropMove = opts.onCropMove;\n      }\n      var returnMode = null;\n      if (opts.returnMode !== undefined) {\n        var s = opts.returnMode.toLowerCase();\n        if (['real', 'ratio', 'raw'].indexOf(s) === -1) {\n          throw \"Invalid return mode.\";\n        }\n        returnMode = s;\n      }\n      var convertToPixels = function convertToPixels(container) {\n        var width = container.offsetWidth;\n        var height = container.offsetHeight;\n        var sizeKeys = ['maxSize', 'minSize', 'startSize'];\n        for (var i = 0; i < sizeKeys.length; i++) {\n          var key = sizeKeys[i];\n          if (this[key] !== null) {\n            if (this[key].unit == '%') {\n              if (this[key].width !== null) {\n                this[key].width = this[key].width / 100 * width;\n              }\n              if (this[key].height !== null) {\n                this[key].height = this[key].height / 100 * height;\n              }\n            }\n            delete this[key].unit;\n          }\n        }\n      };\n      var defaultValue = function defaultValue(v, d) {\n        return v !== null ? v : d;\n      };\n      return {\n        aspectRatio: defaultValue(aspectRatio, defaults$$1.aspectRatio),\n        maxSize: defaultValue(maxSize, defaults$$1.maxSize),\n        minSize: defaultValue(minSize, defaults$$1.minSize),\n        startSize: defaultValue(startSize, defaults$$1.startSize),\n        returnMode: defaultValue(returnMode, defaults$$1.returnMode),\n        onInitialize: defaultValue(onInitialize, defaults$$1.onInitialize),\n        onCropStart: defaultValue(onCropStart, defaults$$1.onCropStart),\n        onCropMove: defaultValue(onCropMove, defaults$$1.onCropMove),\n        onCropEnd: defaultValue(onCropEnd, defaults$$1.onCropEnd),\n        convertToPixels: convertToPixels\n      };\n    }\n  }]);\n  return CropprCore;\n}();\nfunction round(value, decimals) {\n  return Number(Math.round(value + 'e' + decimals) + 'e-' + decimals);\n}\n\nvar Croppr$1 = function (_CropprCore) {\n  inherits(Croppr, _CropprCore);\n  /**\n   * @constructor\n   * Calls the CropprCore's constructor.\n   */\n  function Croppr(element, options) {\n    var _deferred = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    classCallCheck(this, Croppr);\n    return possibleConstructorReturn(this, (Croppr.__proto__ || Object.getPrototypeOf(Croppr)).call(this, element, options, _deferred));\n  }\n  /**\n   * Gets the value of the crop region.\n   * @param {String} [mode] Which mode of calculation to use: 'real', 'ratio' or\n   *      'raw'.\n   */\n  createClass(Croppr, [{\n    key: 'getValue',\n    value: function getValue(mode) {\n      return get(Croppr.prototype.__proto__ || Object.getPrototypeOf(Croppr.prototype), 'getValue', this).call(this, mode);\n    }\n    /**\n     * Changes the image src.\n     * @param {String} src\n     */\n  }, {\n    key: 'setImage',\n    value: function setImage(src) {\n      return get(Croppr.prototype.__proto__ || Object.getPrototypeOf(Croppr.prototype), 'setImage', this).call(this, src);\n    }\n  }, {\n    key: 'destroy',\n    value: function destroy() {\n      return get(Croppr.prototype.__proto__ || Object.getPrototypeOf(Croppr.prototype), 'destroy', this).call(this);\n    }\n    /**\n     * Moves the crop region to a specified coordinate.\n     * @param {Number} x\n     * @param {Number} y\n     */\n  }, {\n    key: 'moveTo',\n    value: function moveTo(x, y) {\n      this.box.move(x, y);\n      this.redraw();\n      if (this.options.onCropEnd !== null) {\n        this.options.onCropEnd(this.getValue());\n      }\n      return this;\n    }\n    /**\n     * Resizes the crop region to a specified width and height.\n     * @param {Number} width\n     * @param {Number} height\n     * @param {Array} origin The origin point to resize from.\n     *      Defaults to [0.5, 0.5] (center).\n     */\n  }, {\n    key: 'resizeTo',\n    value: function resizeTo(width, height) {\n      var origin = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [.5, .5];\n      this.box.resize(width, height, origin);\n      this.redraw();\n      if (this.options.onCropEnd !== null) {\n        this.options.onCropEnd(this.getValue());\n      }\n      return this;\n    }\n    /**\n     * Scale the crop region by a factor.\n     * @param {Number} factor\n     * @param {Array} origin The origin point to resize from.\n     *      Defaults to [0.5, 0.5] (center).\n     */\n  }, {\n    key: 'scaleBy',\n    value: function scaleBy(factor) {\n      var origin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [.5, .5];\n      this.box.scale(factor, origin);\n      this.redraw();\n      if (this.options.onCropEnd !== null) {\n        this.options.onCropEnd(this.getValue());\n      }\n      return this;\n    }\n  }, {\n    key: 'reset',\n    value: function reset() {\n      this.box = this.initializeBox(this.options);\n      this.redraw();\n      if (this.options.onCropEnd !== null) {\n        this.options.onCropEnd(this.getValue());\n      }\n      return this;\n    }\n  }]);\n  return Croppr;\n}(CropprCore);\n\nreturn Croppr$1;\n\n})));\n\n\n//# sourceURL=webpack:///./node_modules/croppr/dist/croppr.js?");

/***/ }),

/***/ "./public/javascript/userProfile.js":
/*!******************************************!*\
  !*** ./public/javascript/userProfile.js ***!
  \******************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var croppr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! croppr */ \"./node_modules/croppr/dist/croppr.js\");\n/* harmony import */ var croppr__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(croppr__WEBPACK_IMPORTED_MODULE_0__);\n\n\nconst imgFileElement = document.getElementById(\"avatar\");\nconst selectImageBtn = document.getElementById(\"select-img-btn\");\nconst changedImg = document.getElementById(\"changed-image\");\nconst imgToCrop = document.getElementById(\"croppr\");\n\n/***************phone number formatter**************************** */\nconst phoneNumber = document.getElementById(\"phoneNumber\");\n\n\nphoneNumber.addEventListener(\"keyup\", (e)=> {\n    if ((e.target.value.length === 3 || e.target.value.length === 7)\n        && (e.keyCode !== 8 && e.keyCode !== 46)) {\n        phoneNumber.value += \"-\";\n    }\n})\n/******************************************************************* */\n\n/*******************************img cropper****************** */\n//const image = document.getElementById(\"img-cropper\");\n/*\nlet cropper = new Croppr(\"#croppr\", {\n    aspectRatio: 1\n});\n*/\n\n/************************************************************ */\n\nimgFileElement.addEventListener(\"change\", () => {\n    console.log(\"file added\");\n    console.log(imgFileElement.files[0].name);\n    handleImageFile(imgFileElement.files[0]);\n},false)\n\nselectImageBtn.addEventListener(\"click\", (e) => {\n    imgFileElement.click();\n},false)\n\nselectImageBtn.addEventListener(\"dragenter\", (e) => {\n    e.stopPropagation();\n    e.preventDefault();\n},false)\n\nselectImageBtn.addEventListener(\"dragover\", (e) => {\n    e.stopPropagation();\n    e.preventDefault();\n},false)\n\nselectImageBtn.addEventListener(\"drop\", (e) => {\n    e.stopPropagation();\n    e.preventDefault();\n    const dt = e.dataTransfer;\n    const files = dt.files;\n    handleImageFile(files[0]);\n},false)\n\n/*\nhandle files uploaded by user. this will show the image uploaded by the use and allow them\nto crop it before they upload it to the server\n*/\nfunction handleImageFile(file) {\n    if (file.type.startsWith(\"image/\")) {\n        imgToCrop.file = file;    \n        const reader = new FileReader();\n        reader.onload = function(e) {\n            imgToCrop.src = e.target.result;\n            handleCropImage();\n        }\n\n        reader.readAsDataURL(file);\n        selectImageBtn.innerText = \"Click After Selection\"\n        selectImageBtn.style.fontSize = \"30px\";\n        selectImageBtn.style.color = \"#FF9D0B\"\n    }\n}\n\nfunction handleCropImage() {\n    let cropper = new croppr__WEBPACK_IMPORTED_MODULE_0___default.a(\"#croppr\", {\n        aspectRatio: 1\n    });\n}\n\n//# sourceURL=webpack:///./public/javascript/userProfile.js?");

/***/ })

/******/ });